# Посчитать коэффициент линейной регрессии при заработной плате (zp),
# используя градиентный спуск (без intercept).(y=ax)

# Градиентный спуск - это метод оптимизации, который используется
# для нахождения минимума (или максимума) функции путем итеративного 
# изменения параметров этой функции в направлении, обратном градиенту функции.

import numpy as np

# Дано:
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# Градиентный спуск для коэффициента a (без интерсепта)
learning_rate = 0.00001  # Скорость обучения
iterations = 1000000  # Количество итераций

a = 0  # Начальное значение коэффициента

n = len(zp)

for _ in range(iterations):
    gradient = (-2/n) * np.sum(zp * (ks - a * zp))  # Вычисляем градиент
    a -= learning_rate * gradient  # Обновляем коэффициент a

print(f"Коэффициент линейной регрессии (без интерсепта): a = {a:.4f}")

# Значения первой и второй задачи одинаковые:
# Коэффициент линейной регрессии (без интерсепта): a = 5.8898
